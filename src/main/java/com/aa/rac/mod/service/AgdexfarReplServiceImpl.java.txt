package com.aa.rac.mod.service.agdexfarrepl;

import com.aa.rac.mod.domain.AbstractServiceEventHub;
import com.aa.rac.mod.domain.annotations.SetAuditColumns;
import com.aa.rac.mod.domain.annotations.SetServiceClasses;
import com.aa.rac.mod.domain.enums.CuratedEntityClassMapper;
import com.aa.rac.mod.domain.enums.EventHubPojoClassMapper;
import com.aa.rac.mod.domain.enums.ServiceClassMapper;
import com.aa.rac.mod.domain.exceptions.ProcessingException;
import com.aa.rac.mod.orm.dao.agdexfarrepl.AgdexfarRepl;
import com.aa.rac.mod.repository.eventhub.Agdexfar;
import com.aa.rac.mod.repository.findatahub.agdexfarrepl.AgdexfarReplRepository;
import java.time.LocalDateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.stereotype.Service;


/** AgdexfarRepl service implemenation. */
@Service
@EnableAsync
@SetAuditColumns(targetCuratedCdcTimestampField = "eventHubTimestamp")
@SetServiceClasses(eventHubClassMapper = EventHubPojoClassMapper.AGDEXFAR,
    curatedTargetClassMapper = CuratedEntityClassMapper.AGDEXFARREPL,
    repoClass = AgdexfarReplRepository.class
)
public class AgdexfarReplServiceImpl 
    extends AbstractServiceEventHub<Agdexfar, AgdexfarRepl, AgdexfarReplRepository> {
  
  @Override
  @Async
  public void processAsync(String topicPayload) throws ProcessingException { 
    try {
      processToCuratedAndEmit(topicPayload);
    } catch (ProcessingException e) {
      e.setCurator(ServiceClassMapper.AGDEXFARREPL_SERVICE_IMPL);
      e.setEventHubSource(EventHubPojoClassMapper.AGDEXFAR);
      e.setCuratedTarget(CuratedEntityClassMapper.AGDEXFARREPL);
      e.setPayload(topicPayload);
      e.setRetryCount(1);
      e.setExceptionTimestamp(LocalDateTime.now());
      throw e;
    }
  }
  
  @Override
  @Async
  public void processAsync(ProcessingException processingException) throws ProcessingException { 
    try {
      processToCuratedAndEmit(processingException.getPayload());
    } catch (ProcessingException e) {
      e.setCurator(processingException.getCurator());
      e.setEventHubSource(processingException.getEventHubSource());
      e.setCuratedTarget(processingException.getCuratedTarget());
      e.setPayload(processingException.getPayload());
      e.setRetryCount(processingException.getRetryCount() + 1);
      e.setExceptionTimestamp(LocalDateTime.now());
      throw e;
    }
  }
}